---
AWSTemplateFormatVersion: "2010-09-09"
Description: Stack encompassing all the resources used by Amazon API Gateway
Parameters:
  ApiName:
    Type: String
  UserPoolId:
    Type: String
  ApiDomainName:
    Type: String
  CertificateARN:
    Type: String
  AuthorizerName:
    Type: String
  GetCurryhousesLambdaARN:
    Type: String
  PostCurryhouseApplicationLambdaARN:
    Type: String
  LogGroupName:
    Type: String
Resources:
  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name:
        Ref: ApiName
      ProtocolType: HTTP

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref Api
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: |
          { "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }

  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      Stage: !Ref Stage
      DomainName: !Ref DomainName

  DomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref ApiDomainName
      DomainNameConfigurations:
        - CertificateArn: !Ref CertificateARN

  CognitoAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Ref AuthorizerName
      ApiId: !Ref Api
      AuthorizerType: JWT
      IdentitySource: ['$request.header.Authorization']
      JwtConfiguration:
        Audience:
          - !Ref UserPoolId
        Issuer: !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}'

  # API Routes
  PostReview:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: POST /review
  PutReview:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: PUT /review/{reviewId}
  DeleteReview:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: DELETE /review/{reviewId}
  GetUserReviews:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: GET /user/{userId}/reviews
  GetCurryhouses:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: GET /curryhouses
      Target: !Join
        - ''
        - - 'integrations/'
          - !Ref GetCurryhousesIntegration
  PostCurryhouseApplication:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: POST /curryhouse/application
      Target: !Join
        - ''
        - - 'integrations/'
          - !Ref PostCurryhouseApplicationIntegration
      AuthorizationType: JWT
      AuthorizerId: !Ref CognitoAuthorizer

  PatchCurryhouseApplication:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: PATCH /curryhouse/application/{applicationId}
  GetCurryhouse:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: GET /curryhouse/{curryHouseId}
  PutCurryhouse:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: PUT /curryhouse/{curryHouseId}

  GetCurryhousesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Api
      IntegrationUri: !Ref GetCurryhousesLambdaARN
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: 2.0

  PostCurryhouseApplicationIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Api
      IntegrationUri: !Ref PostCurryhouseApplicationLambdaARN
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: 2.0

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
      Policies:
        - PolicyName: ApiLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: !GetAtt ApiLogGroup.Arn